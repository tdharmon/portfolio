@import '../../styles/_variables';

@function code-color($theme, $name) {
  @if ($theme != 'light' and $theme != 'dark') {
    @error 'You must pass in either light or dark as the theme';
  }

  $colors: (
    background: (
      light: #f0f0f0,
      dark: #111,
    ),
    border: (
      light: darken(#f0f0f0, 5%),
      dark: darken(#111, 5%),
    ),
    selection: (
      light: darken(#f0f0f0, 10%),
      dark: darken(#111, 10%),
    ),
    keyword: (
      light: color(light, primary-text),
      dark: color(dark, primary-text),
    ),
    string: (
      light: #0569dd,
      dark: #0569dd,
    ),
    class: (
      light: #7805dd,
      dark: #7805dd,
    ),
    comment: (
      light: #999988,
      dark: #999988,
    ),
    function: (
      light: #0a7f06,
      dark: #0a7f06,
    ),
    tag: (
      light: #00009f,
      dark: #00009f,
    ),
  );

  $selected-color-map: map-get($colors, $name);
  @return map-get($selected-color-map, $theme);
}

/**
 * GHColors theme by Avi Aryan (http://aviaryan.in)
 * Inspired by Github syntax coloring
 */

code[class*='language-'],
pre[class*='language-'] {
  // font-family: "Consolas", "Bitstream Vera Sans Mono", "Courier New", Courier, monospace;
  direction: ltr;
  text-align: left;
  white-space: pre;
  word-spacing: normal;
  word-break: normal;
  font-size: 0.95em;
  line-height: 1.2em;
  border-radius: 3px;

  tab-size: 4;
  hyphens: none;

  border: 1px solid;
}

.Light {
  code[class*='language-'],
  pre[class*='language-'] {
    color: lighten(color(light, text-bold), 10%);

    background-color: code-color(light, background);
    border-color: code-color(light, border);

    &::selection,
    & ::selection {
      background: code-color(light, selection);
    }
  }
}

.Light {
  code[class*='language-'],
  pre[class*='language-'] {
    color: lighten(color(dark, text-bold), 10%);

    background-color: code-color(dark, background);
    border-color: code-color(dark, border);

    &::selection,
    & ::selection {
      background: code-color(dark, selection);
    }
  }
}

/* Code blocks */
pre[class*='language-'] {
  padding: 1em;
  margin: 0;
  overflow: auto;

  code {
    border: none;
  }
}

:not(pre) > code[class*='language-'],
pre[class*='language-'] {
}

/* Inline code */
:not(pre) > code[class*='language-'] {
  padding: 0 0.25rem;
  display: inline-block;
}

.token {
  &.comment,
  &.prolog,
  &.doctype,
  &.cdata {
    font-style: italic;
  }

  &.namespace {
    opacity: 0.7;
  }

  &.important,
  &.bold {
    font-weight: bold;
  }

  &.italic {
    font-style: italic;
  }
}

.Light {
  .token {
    &.comment,
    &.prolog,
    &.doctype,
    &.cdata {
      color: code-color(light, comment);
    }

    &.class-name {
      color: code-color(light, class);
    }

    &.string,
    &.attr-value {
      color: code-color(light, string);
    }

    &.punctuation {
      color: darken(color(light, text), 20%); /* no highlight */
    }

    &.operator {
      color: code-color(light, keyword);
    }

    &.entity,
    &.url,
    &.symbol,
    &.number,
    &.boolean,
    &.variable,
    &.constant,
    &.property,
    &.regex,
    &.inserted {
      color: code-color(light, class);
    }

    &.atrule,
    &.keyword,
    &.attr-name,
    .language-autohotkey &.selector {
      color: code-color(light, keyword);
    }

    &.function,
    &.deleted,
    .language-autohotkey &.tag {
      color: code-color(light, function);
    }

    &.tag,
    &.selector,
    .language-autohotkey &.keyword {
      color: code-color(light, tag);
    }
  }
}

.Dark {
  .token {
    &.comment,
    &.prolog,
    &.doctype,
    &.cdata {
      color: code-color(dark, comment);
    }

    &.class-name {
      color: code-color(dark, class);
    }

    &.string,
    &.attr-value {
      color: code-color(dark, string);
    }

    &.punctuation {
      color: darken(color(dark, text), 20%); /* no highlight */
    }

    &.operator {
      color: code-color(dark, keyword);
    }

    &.entity,
    &.url,
    &.symbol,
    &.number,
    &.boolean,
    &.variable,
    &.constant,
    &.property,
    &.regex,
    &.inserted {
      color: code-color(dark, class);
    }

    &.atrule,
    &.keyword,
    &.attr-name,
    .language-autohotkey &.selector {
      color: code-color(dark, keyword);
    }

    &.function,
    &.deleted,
    .language-autohotkey &.tag {
      color: code-color(dark, function);
    }

    &.tag,
    &.selector,
    .language-autohotkey &.keyword {
      color: code-color(dark, tag);
    }
  }
}
