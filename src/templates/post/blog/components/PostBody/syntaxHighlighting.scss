@import 'foundation';
@import 'ui-kit-mixins';

@function code-color($theme, $name) {
  @if ($theme != 'Light' and $theme != 'Dark') {
    @error 'You must pass in either Light or Dark as the theme';
  }

  $colors: (
    code-background: (
      Light: color(Light, caption-bg),
      Dark: color(Dark, caption-bg),
    ),
    code-border: (
      Light: darken(color(Light, caption-bg), 15%),
      Dark: lighten(color(Dark, caption-bg), 25%),
    ),
    pre-background: (
      Light: color(Dark, caption-bg),
      Dark: color(Dark, caption-bg),
    ),
    pre-border: (
      Light: darken(#111, 5%),
      Dark: darken(#111, 5%),
    ),
    selection: (
      Light: darken(color(Light, caption-bg), 10%),
      Dark: lighten(color(Dark, caption-bg), 10%),
    ),
    keyword: (
      Light: #beaaf9,
      Dark: #beaaf9,
    ),
    string: (
      Light: #c1e38a,
      Dark: #c1e38a,
    ),
    punctuation: (
      Light: darken(color(Dark, text), 20%),
      Dark: darken(color(Dark, text), 20%),
    ),
    class: (
      Light: #70cde3,
      Dark: #70cde3,
    ),
    comment: (
      Light: #999988,
      Dark: #999988,
    ),
    function: (
      Light: #fcd58b,
      Dark: #fcd58b,
    ),
    tag: (
      Light: #828eff,
      Dark: #828eff,
    ),
  );

  $selected-color-map: map-get($colors, $name);
  @return map-get($selected-color-map, $theme);
}

/**
 * GHColors theme by Avi Aryan (http://aviaryan.in)
 * Inspired by Github syntax coloring
 */

code[class*='language-'],
pre[class*='language-'] {
  // font-family: "Consolas", "Bitstream Vera Sans Mono", "Courier New", Courier, monospace;
  direction: ltr;
  text-align: left;
  white-space: pre;
  word-spacing: normal;
  word-break: normal;
  font-size: 0.95em;
  line-height: 1.2em;
  border-radius: 3px;

  tab-size: 4;
  hyphens: none;
}

@mixin SyntaxHighlighting($theme) {
  .#{$theme} {
    code[class*='language-'] {
      color: lighten(color($theme, text-bold), 10%);

      background-color: code-color($theme, code-background);
      border: 1px solid code-color($theme, code-border);

      &::selection,
      & ::selection {
        background: code-color($theme, selection);
      }
    }

    pre[class*='language-'],
    pre[class*='language-'] > code[class*='language'] {
      & > code[class*='language-'] {
        background-color: transparent;
        border-color: transparent;
      }

      color: lighten(color(Dark, text-bold), 10%);

      background-color: code-color(Dark, pre-background);

      &::selection,
      & ::selection {
        background: code-color(Dark, selection);
      }
    }
  }
}

@include SyntaxHighlighting(Light);
@include SyntaxHighlighting(Dark);

/* Code blocks */
pre[class*='language-'] {
  padding: space(medium) $breakout-amount;
  margin-top: space(normal);
  margin-bottom: space(normal);
  overflow: auto;

  code {
    border: none;
  }

  @include Breakout;
}

/* Inline code */
:not(pre) > code[class*='language-'] {
  padding: 0 0.25rem;
  display: inline-block;
}

.token {
  &.comment,
  &.prolog,
  &.doctype,
  &.cdata {
    font-style: italic;
  }

  &.namespace {
    opacity: 0.7;
  }

  &.important,
  &.bold {
    font-weight: bold;
  }

  &.italic {
    font-style: italic;
  }
}

.Light {
  .token {
    &.comment,
    &.prolog,
    &.doctype,
    &.cdata {
      color: code-color(Light, comment);
    }

    &.class-name {
      color: code-color(Light, class);
    }

    &.string,
    &.attr-value {
      color: code-color(Light, string);
    }

    &.punctuation {
      color: code-color(Light, punctuation);
    }

    &.operator {
      color: code-color(Light, keyword);
    }

    &.entity,
    &.url,
    &.symbol,
    &.number,
    &.boolean,
    &.variable,
    &.constant,
    &.property,
    &.regex,
    &.inserted {
      color: code-color(Light, class);
    }

    &.atrule,
    &.keyword,
    &.attr-name,
    .language-autohotkey &.selector {
      color: code-color(Light, keyword);
    }

    &.function,
    &.deleted,
    .language-autohotkey &.tag {
      color: code-color(Light, function);
    }

    &.tag,
    &.selector,
    .language-autohotkey &.keyword {
      color: code-color(Light, tag);
    }
  }
}

.Dark {
  .token {
    &.comment,
    &.prolog,
    &.doctype,
    &.cdata {
      color: code-color(Dark, comment);
    }

    &.class-name {
      color: code-color(Dark, class);
    }

    &.string,
    &.attr-value {
      color: code-color(Dark, string);
    }

    &.punctuation {
      color: code-color(Dark, punctuation);
    }

    &.operator {
      color: code-color(Dark, keyword);
    }

    &.entity,
    &.url,
    &.symbol,
    &.number,
    &.boolean,
    &.variable,
    &.constant,
    &.property,
    &.regex,
    &.inserted {
      color: code-color(Dark, class);
    }

    &.atrule,
    &.keyword,
    &.attr-name,
    .language-autohotkey &.selector {
      color: code-color(Dark, keyword);
    }

    &.function,
    &.deleted,
    .language-autohotkey &.tag {
      color: code-color(Dark, function);
    }

    &.tag,
    &.selector,
    .language-autohotkey &.keyword {
      color: code-color(Dark, tag);
    }
  }
}
